// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ARTIST
  LABEL
}

model User {
  id                      String                        @id @default(cuid())
  name                    String?
  username                String?
  email                   String?                       @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole                      @default(USER)
  accounts                Account[]
  playlists               Playlist[]
  followedArtists         UserFollowedArtist[]
  listeningHistory        UserListeningHistory[]
  currentSubscription     UserSubscription?             @relation(name: "CurrentUserSubscription")
  subscriptionHistory     UserSubscription[]            @relation(name: "SubscriptionHistory")
  comments                Comment[]
  likes                   Like[]
  artistCircleMemberships ArtistCircleMembership[]
  languagePreference      String?
  language                Language?                     @relation(fields: [languagePreference], references: [code])
  reportedFlags           ContentFlag[]                 @relation("ReportedFlags")
  resolvedFlags           ContentFlag[]                 @relation("ResolvedFlags")
  analyticsEvents         AnalyticsEvent[]
  recommendations         Recommendation[]
  createdPlaylists        CollaborativePlaylist[]       @relation("CreatedPlaylists")
  collaborativePlaylists  CollaborativePlaylistMember[]
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  mediaUploads            MediaUpload[] // Add this line
  notifications           Notification[]
  recordLabel             RecordLabel?                  @relation(fields: [recordLabelId], references: [id])
  recordLabelId           String?
  artists                 Artist[]
}

model SubscriptionTier {
  name              String             @id
  price             Float
  features          String[]
  duration          Int // Subscription duration in days
  userSubscriptions UserSubscription[]
}

model UserSubscription {
  id               String           @id @default(cuid())
  userId           String
  user             User             @relation(name: "SubscriptionHistory", fields: [userId], references: [id])
  tierName         String
  subscriptionTier SubscriptionTier @relation(fields: [tierName], references: [name])
  startDate        DateTime         @default(now())
  endDate          DateTime
  isActive         Boolean          @default(true)
  autoRenew        Boolean          @default(true)
  currentUser      User?            @relation(name: "CurrentUserSubscription", fields: [currentUserId], references: [id])
  currentUserId    String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId, isActive])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, songId])
}

// Account Model
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Verification Token
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Password Reset Token
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum MediaUploadType {
  image
  video
  audio
}

// Media Upload Table
model MediaUpload {
  id                  String             @id @default(cuid())
  type                MediaUploadType    @default(image)
  userId              String
  fileUrl             String
  createdAt           DateTime           @default(now())
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaDescriptions   MediaDescription[]
  artists             Artist[]           @relation("MediaUploadArtists")
  profileImageArtists Artist[]           @relation("artistProfileMediaUpload")
  coverImageArtists   Artist[]           @relation("artistCoverMediaUpload")
}

// Album Table
model MediaDescription {
  id        String      @id @default(cuid())
  content   String
  mediaId   String
  createdAt DateTime    @default(now())
  media     MediaUpload @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Notification {
  id               String           @id @default(cuid())
  title            String
  subTitle         String
  message          String
  imagecover       String
  notificationType NotificationType
  sendDate         DateTime         @default(now())
  createdAt        DateTime         @default(now())
  isRead           Boolean          @default(false)
  isSent           Boolean          @default(false)
  status           Boolean          @default(false) // for when to turn on or off a notification
  users            User[] // For specific user notifications
  contentType      ContentType? // For content-specific notifications
  contentId        String? // ID of the related content
}

enum NotificationType {
  ALL_USERS
  SPECIFIC_USERS
  NEW_SONG
  NEW_ALBUM
  NEW_ARTIST
}

enum ContentType {
  SONG
  ALBUM
  ARTIST
  LINK
  PLAYLIST
}

model Royalty {
  id        String   @id @default(cuid())
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  artistId  String
  artist    Artist   @relation(fields: [artistId], references: [id])
  amount    Float
  currency  String
  period    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RadioStation {
  id          String   @id @default(cuid())
  name        String
  description String?
  genreId     String
  genre       Genre    @relation(fields: [genreId], references: [id])
  songs       Song[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mood {
  id    String @id @default(cuid())
  name  String @unique
  songs Song[]
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime
  coverImage  String?
  location    String
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ArtistCircleMembership {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  artistCircleId String
  artistCircle   ArtistCircle @relation(fields: [artistCircleId], references: [id])
  amount         Float
  joinedAt       DateTime     @default(now())
  expiresAt      DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, artistCircleId])
}

model ArtistCircle {
  id            String                   @id @default(cuid())
  artistId      String                   @unique
  artist        Artist                   @relation(fields: [artistId], references: [id])
  minimumAmount Float
  maximumAmount Float
  description   String?
  perks         String[]
  members       ArtistCircleMembership[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

model Artist {
  id                   String               @id @default(cuid())
  name                 String
  biography            String?
  profileImageId       String?
  profileImage         MediaUpload?         @relation(name: "artistProfileMediaUpload", fields: [profileImageId], references: [id])
  coverImageId         String?
  coverImage           MediaUpload?         @relation(name: "artistCoverMediaUpload", fields: [coverImageId], references: [id])
  mediaUploads         MediaUpload[]        @relation("MediaUploadArtists")
  isIndependent        Boolean              @default(true)
  AgreeToTermsPolicy   Boolean              @default(true)
  AgreeToContentPolicy Boolean              @default(true)
  genreId              String?
  genre                Genre?               @relation(fields: [genreId], references: [id])
  labelId              String?
  label                RecordLabel?         @relation(fields: [labelId], references: [id])
  userId               String?
  user                 User?                @relation(fields: [userId], references: [id])
  socialMedia          ArtistSocialMedia?
  songs                Song[]
  featuredIn           SongFeaturedArtist[]
  albums               Album[]
  credits              Credit[]
  metrics              ArtistMetrics[]
  royalties            Royalty[]
  events               Event[]
  followers            UserFollowedArtist[]
  artistCircle         ArtistCircle?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model ArtistSocialMedia {
  id           String   @id @default(cuid())
  artistId     String   @unique
  artist       Artist   @relation(fields: [artistId], references: [id])
  instagram    String?
  contactEmail String
  contactPhone String?
  tiktok       String?
  twitter      String?
  facebook     String?
  youtube      String?
  spotify      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RecordLabel {
  id           String   @id @default(cuid())
  name         String
  contactEmail String
  contactPhone String?
  website      String?
  address      String?
  city         String?
  state        String?
  country      String
  users        User[]
  artists      Artist[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Album {
  id          String         @id @default(cuid())
  title       String
  releaseDate DateTime
  type        AlbumType
  artistId    String
  coverImage  String
  artist      Artist         @relation(fields: [artistId], references: [id])
  songs       Song[]
  genres      Genre[]
  metrics     AlbumMetrics[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Song {
  id                     String                  @id @default(cuid())
  title                  String
  duration               Int // Duration in seconds
  releaseDate            DateTime
  type                   SongType
  artistId               String
  filePath               String
  artist                 Artist                  @relation(fields: [artistId], references: [id])
  albumId                String?
  album                  Album?                  @relation(fields: [albumId], references: [id])
  genres                 Genre[]
  lyrics                 Lyrics?
  featuredArtists        SongFeaturedArtist[]
  credits                Credit[]
  metrics                SongMetrics[]
  playlists              Playlist[]
  listeningHistory       UserListeningHistory[]
  comments               Comment[]
  likes                  Like[]
  royalties              Royalty[]
  radioStations          RadioStation[]
  moods                  Mood[]
  languageCode           String?
  language               Language?               @relation(fields: [languageCode], references: [code])
  recommendations        Recommendation[]
  collaborativePlaylists CollaborativePlaylist[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model Lyrics {
  id        String   @id @default(cuid())
  content   String
  language  String
  songId    String   @unique
  song      Song     @relation(fields: [songId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SongFeaturedArtist {
  id        String   @id @default(cuid())
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  artistId  String
  artist    Artist   @relation(fields: [artistId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, artistId])
}

model Credit {
  id        String     @id @default(cuid())
  role      CreditRole
  songId    String
  song      Song       @relation(fields: [songId], references: [id])
  artistId  String
  artist    Artist     @relation(fields: [artistId], references: [id])
  details   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([songId, artistId, role])
}

model Genre {
  id            String         @id @default(cuid())
  name          String         @unique
  songs         Song[]
  albums        Album[]
  artists       Artist[]
  radioStations RadioStation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserListeningHistory {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  songId         String
  song           Song     @relation(fields: [songId], references: [id])
  listenedAt     DateTime @default(now())
  listenDuration Int
}

model Playlist {
  id         String   @id @default(cuid())
  name       String
  userId     String
  coverImage String
  user       User     @relation(fields: [userId], references: [id])
  songs      Song[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserFollowedArtist {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  artistId   String
  artist     Artist   @relation(fields: [artistId], references: [id])
  followedAt DateTime @default(now())

  @@unique([userId, artistId])
}

model SongMetrics {
  id                    String   @id @default(cuid())
  songId                String
  song                  Song     @relation(fields: [songId], references: [id])
  playCount             Int
  uniqueListeners       Int
  skipRate              Float // Percentage of skips before song completion
  completionRate        Float // Percentage of full song plays
  averageListenDuration Int // Average listen duration in seconds
  popularityScore       Float // Calculated popularity score
  date                  DateTime // Date of these metrics
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([songId, date])
}

model AlbumMetrics {
  id              String   @id @default(cuid())
  albumId         String
  album           Album    @relation(fields: [albumId], references: [id])
  totalPlayCount  Int
  uniqueListeners Int
  popularityScore Float // Calculated popularity score
  date            DateTime // Date of these metrics
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([albumId, date])
}

model ArtistMetrics {
  id              String   @id @default(cuid())
  artistId        String
  artist          Artist   @relation(fields: [artistId], references: [id])
  totalPlayCount  Int
  uniqueListeners Int
  followerCount   Int
  popularityScore Float // Calculated popularity score
  date            DateTime // Date of these metrics
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([artistId, date])
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[] // For songs with lyrics in this language
  users     User[] // For user interface language preference
}

model ContentFlag {
  id          String     @id @default(cuid())
  contentType String // e.g., "comment", "playlist", "user_profile"
  contentId   String
  reporterId  String
  reporter    User       @relation("ReportedFlags", fields: [reporterId], references: [id])
  reason      String
  status      FlagStatus
  resolvedBy  String?
  resolver    User?      @relation("ResolvedFlags", fields: [resolvedBy], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventType String
  eventData Json
  createdAt DateTime @default(now())
}

model Recommendation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, songId])
}

model CollaborativePlaylist {
  id            String                        @id @default(cuid())
  name          String
  creatorId     String
  creator       User                          @relation("CreatedPlaylists", fields: [creatorId], references: [id])
  songs         Song[]
  collaborators CollaborativePlaylistMember[]
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
}

model CollaborativePlaylistMember {
  id         String                @id @default(cuid())
  userId     String
  user       User                  @relation(fields: [userId], references: [id])
  playlistId String
  playlist   CollaborativePlaylist @relation(fields: [playlistId], references: [id])
  role       CollaboratorRole
  joinedAt   DateTime              @default(now())

  @@unique([userId, playlistId])
}

enum AlbumType {
  ALBUM
  EP
  AD
  MIXTAPE
  PODCAST
  LIVEBAND
  LIVE_RADIO
  LIVE
}

enum SongType {
  SINGLE
  ALBUM_TRACK
  LIVE_RADIO
  EPISODE
  BLITS
  AD
  MIXTAPE
}

enum FlagStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum CollaboratorRole {
  OWNER
  EDITOR
  VIEWER
}

enum CreditRole {
  SONGWRITER
  PRODUCER
  ENGINEER
  MIXER
  MASTERING_ENGINEER
  VOCALIST
  INSTRUMENTALIST
  ARRANGER
  OTHER
}
